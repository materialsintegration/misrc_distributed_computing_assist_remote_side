概要
====

本書は、NIMS スパコンシステムを外部計算機としてMIntシステムのワークフローから利用した場合の検証結果と、
実際に利用する場合の準備、用意するものなどをまとめたものである。

NIMSのスパコンシステムを外部計算対象とするには
====================================================

NIMSのスパコンでは長時間のログインまたはプログラムの実行が禁止されている。
他方、外部計算はMIntシステムからSSHによるアクセスか、外部計算機からのAPIによるMIntシステムへのアクセスのどちらかしか利用方法がないが、
前者はMIntシステムがDMZにあるため、直接SSHできない。
後者は長時間プログラム実行が禁止されているため、利用できない。

このため、中間にAPIでMIntシステムにアクセスでき、SSHでNIMS スパコンへアクセスできる計算機を用意し、ここでユーザーごとにAPIポーリングを行い、NIMS スパコンへはSSHで事前処理、qsub処理、事後処理をおこなう方法をとることとした。

.. note::
   事前処理、qsub処理、事後処理は予め利用ユーザーがシェルスクリプトの形で用意する。
.. note::
   事前処理、事後処理はオプションであり、必要なければなくても良い。

外部計算の流れ
==============

外部計算のうちAPIポーリングを利用した利用の流れを示す。

通常の形態
----------
標準的な外部計算実行のフローを :numref:`auxialcalc_for_standard` に示す。

-  ワークフロー → モジュール指定のプログラム（Ａ）の実行
-  モジュール指定のプログラムは外部計算APIアクセススクリプトの起動→ API（Ｂ）へ
-  外部計算機は外部計算機APIアクセスプログラム（Ｃ）を起動→ API（Ｂ）へ（ポーリング）
-  外部計算機は外部計算機APIアクセスプログラム（Ｃ） →  外部計算機の特定のプログラム（Ｄ）を実行（API経由外部計算の実行）

.. _auxialcalc_for_standard:

.. mermaid::
   :align: center
   :caption: 標準的な外部計算実行のフロー

   sequenceDiagram;

     participant A as モジュール
     participant B as プログラム（Ａ）
     participant C as API（Ｂ）
     participant D as プログラム（Ｃ）
     participant E as プログラム（Ｄ）

     Note over A,C : MIntシステム内（NIMS機構内）
     Note over D,E : 外部計算機資源内

     A->>B:モジュールが実行
     B->>C:（Ａ）がhttps経由で実行
     D->>C:（Ｃ）がhttps経由で実行
     D->>E:（Ｃ）が実行

.. raw:: latex

   \newpage

NIMS スパコン用の形態
----------------------------
NIMS スパコン向けの外部計算実行のフローを :numref:`auxialcalc_for_nimssupercomputer` に示す。

* ワークフロー → モジュール指定のプログラム（Ａ）の実行
* モジュール指定のプログラム（Ａ）　は外部計算APIアクセススクリプトの起動→ API（Ｂ）へ
* 外部計算用中間サーバー機は外部計算機APIアクセスプログラム（Ｃ）を起動→ API（Ｂ）へ（ポーリング）
* 外部計算用中間サーバー機は外部計算機APIアクセスプログラム（Ｃ）→ 中間プログラム（Ｄ）を実行（API経由外部計算の実行）
* 中間プログラム（Ｄ）→ 事前処理、qsub処理、事後処理（Ｅ）を実行

.. _auxialcalc_for_nimssupercomputer:

.. mermaid::
   :align: center
   :caption: NIMS スパコン向け外部計算実行のフロー

   sequenceDiagram;

     participant A as モジュール
     participant B as プログラム（Ａ）
     participant C as API（Ｂ）
     participant D as プログラム（Ｃ）
     participant E as プログラム（Ｄ）
     participant F as プログラム（Ｅ）

     Note over A,C : MIntシステム内
     Note over D,E : 外部計算用中間サーバー
     Note over F : NIMS スパコン

     A->>B:モジュールが実行
     B->>C:（Ａ）がhttps経由で実行
     D->>C:（Ｃ）がhttps経由で実行
     D->>E:（Ｃ）が実行
     E->>F: (Ｄ）が実行

.. note::
   黄色い四角の中のシステム、サーバーおよび計算機はすべてNIMS機構内にある。

準備
====

準備は以下の順番で進める。
概ね、通常の外部計算機利用のマニュアルに準じるが、NIMS スパコンの場合はその制限からいくつか違いがある。

-  アカウント開設
-  ワークフロー作成申請をA4班へ実装調査書の作成と送付
-  NIMS スパコンで実行する必要のあるプログラム類は、事前処理、qsub処理、事後処理に分けて利用者が用意する。
-  準備ができたら、ポーリングスクリプトを実行し、待機する。

アカウント開設
--------------

アカウントなどの準備は以下のように進めるが、NIMS スパコンとA4班が用意する中間計算機が対象である。

-  NIMS スパコンアカウントの開設。
-  スパコン利用方法に則り利用者が行う。
-  A4班が用意する中間計算機にアカウントを開設する。
-  利用者がA4班に申請し、A4班側でアカウントを作成する。以降は利用者が実施する。

   -  ログインは公開鍵暗号方式とする。
   -  公開鍵を作成、申請時にA4班へ伝える。
   -  APIポーリングには専用の識別子が必要なので利用者側で決定し、申請時にA4班へ伝える。
   -  利用者のAPIトークンをA4班へ伝え、設定を行う。

-  ここにポーリングスクリプトを配置する必要がある。

   -  このスクリプトはA4班が運用するGithubリポジトリがあるので、そこからダウンロードする。

中間計算機に関して
~~~~~~~~~~~~~~~~~~~~

サーバー名は、carta04.nims.go.jpである。アカウントはA4班へ申請し、作成はA4班が実施する。

ポーリングスクリプト
~~~~~~~~~~~~~~~~~~~~

ポーリングスクリプトは、Githubから以下のようにgitコマンドを使ってcloneする。

.. code-block::

  $ cd <ポーリングスクリプトを配置したい場所> $ git clone https://github.com/materialsintegration/misrc_distributed_computing_assist_remote_side.git``

APIトークン
~~~~~~~~~~~

このワークフローを利用するユーザーで、MIntシステムにログインし、ユーザープロファイル管理画面から取得できる。これをA4班へ伝える。
利用するユーザーが複数いる場合はそれぞれ伝えること。

識別子
~~~~~~

ポーリングシステムでは識別子でMIntシステムと外部計算機とを関連付ける。
他にもいくつかあるので重複しないものであれば何でも良い。
多くの場合企業名や部署名などをアルファベットで記述したものとすることが多い。
本検証では、nims-supercom-a4としている。

ワークフローの準備
------------------

ワークフローおよびMIntシステム側のプログラム類はA4班側で用意する。実装調査書を予め作成依頼するので、作成し、A4班へ提出する。

ワークフローの準備ができたら、ワークフローIDを知らせるので、
ポーリングスクリプトを実行開始し、お知らせしたワークフローIDのワークフローを実行する。

NIMS スパコン用に用意するもの
-----------------------------------

用意するのは以下の通り。

-  事前処理プログラム（オプション）
-  事後処理プログラム（オプション）
-  qsubスクリプト（必須）
-  環境変数 **REMOTE_HOSTNAME** の設定

.. note::
   用意するファイル名はA4班で指定したもの以外はA4班に知らせる必要はない。各プログラム内で整合性が取れていれば問題ない。

.. note::
   ダウンロードしたポーリングスクリプトにresourcesディレクトリがあるので、ここに事前処理、事後処理、qsubスクリプトを用意する。（利用者）

事前処理プログラム
~~~~~~~~~~~~~~~~~~

外部計算機で実行される。qsubスクリプト実行前の処理を別にする必要がある時に利用する。必要なければファイルを作成しない。
ファイル名は、pre_process.shである。
ダウンロードしたディレクトリの下に、resourcesディレクトリがあるので、ここへ配置する。

事後処理プログラム
~~~~~~~~~~~~~~~~~~

外部計算機で実行される。qsubスクリプト実行後の処理を別にする必要がある時に利用する。必要なければファイルを作成しない。
ファイル名は、post_process.shである。ダウンロードしたディレクトリの下に、resourcesディレクトリがあるので、ここへ配置する。

qsubスクリプト
~~~~~~~~~~~~~~

このスクリプトファイルは必須である。
qsub実行のためのスクリプトを記述する。
ファイル名は、qsub_process.shである。ダウンロードしたディレクトリの下に、resoucesディレクトリがあるので、ここへ配置する。

環境変数
~~~~~~~~

qsub実行するためのサーバー名を環境変数名 **REMOTE_HOSTNAME** で指定する。
通常NIMS Super
Computerへアクセスする時のホスト名でも可能であるが、**~/.ssh/config** などに設定したホスト名でも構わない。
公開鍵暗号を指定したホスト名にしたい場合は通常指定するように、それも含めて設定しておく。
設定場所は、**~/.bashrc** など。

.. note::
   ポーリングスクリプトはこの環境変数を設定した後に動作させる。

.. raw:: latex

   \newpage

ポーリングスクリプトの実行
--------------------------

ポーリングは以下のようにして中間計算機にて実行する。

.. code-block::

  $ python3.6 mi-system-remote.py <識別子> https://nims.mintsys.jp <token> calc_base:~/remote_calculation

-  実際のポーリング動作
-  MIntシステムから外部計算への切り替え
-  パラメータ送信
-  パラメータ保存
-  外部計算開始
-  計算終了後、必要なファイルの受信
-  MIntシステムへ結果の送信
-  MIntシステムへ終了の通知

実際にポーリング動作中の画面のイメージを :numref:`polling_image` に示す。

.. figure:: uploads/29c9598a0e4bcc1e0469bd32cf094581/image.png
   :align: center
   :scale: 100%
   :name: polling_image

   APIポーリングの実行イメージ

.. raw:: latex

   \newpage

ランについて
============

ランは通常のMIntシステムの実行によるものと変わらない。
ラン詳細からの実行状況表示および完了後のダウンロードも通常のランと全く同じように扱える。

.. note::
   外部計算中の状況は中間計算機のポーリングスクリプトに「計算中」としか表示できない。

計算中のログは中間計算機の **~/remote-calculation** 以下にUUIDでできたディレクトリが作られるので、
そこに「計算標準出力.txt」と「計算標準エラー出力.txt」というファイルで作成される。

以上
